
{%- set placement = false %}
{%- if OPENSTACK_VERSION == 'train' or OPENSTACK_VERSION == 'ussuri'  or OPENSTACK_VERSION == 'yoga' %}
{%- set placement = true %}
{%- endif %}

# ubuntu 20.04 has only mysql-innodb-cluster charm for mysql db. but it's still ugly and buggy...
{%- set mysql_innodb = false %}
{%- if UBUNTU_SERIES in ['focal', 'jammy']  %}
# https://bugs.launchpad.net/charm-mysql-innodb-cluster/+bug/1882205
# for non MAAS deployments mysql/bionic is still preffered
# let's use percona-cluster in bionic container for now
{%- set mysql_innodb = true %}
{%- endif %}

machines:
{%- set controllers_count = CONTROLLER_NODES.split()|length %}
{%- if AGENT_NODES|string == NODE_IP|string %}
  {%- set all_nodes_count = controllers_count|int %}
  {%- set agent_nodes = [0] %}
{%- else %}
  {%- set controller_nodes_list = CONTROLLER_NODES.split() %}
  {%- set agent_nodes_list = AGENT_NODES.split() %}
  {%- set all_nodes_list = controller_nodes_list + agent_nodes_list %}
  {%- set all_nodes_list = all_nodes_list | unique | list %}
  {%- set all_nodes_count = all_nodes_list | length %}
  {%- set common_nodes = [] %}
  {%- for agent in agent_nodes_list %}
    {%- if agent in controller_nodes_list %}
      {{ common_nodes.append(controller_nodes_list.index(agent))|default("", True) }}
    {%- endif %}
  {%- endfor %}
  {%- set agent_nodes = common_nodes + range(controllers_count|int, all_nodes_count) | list %}
{%- endif %}
{%- set all_nodes = range(0, all_nodes_count) | list %}
{%- for i in range(0, all_nodes_count) %}
  {{ i }}:
    series: "{{ UBUNTU_SERIES }}"
    constraints: mem=15G cores=8 root-disk=120G
{%- endfor %}

series: "{{ UBUNTU_SERIES }}"
services:
  glance:
    charm: "glance"
    num_units: 1
    channel: "{{ OPENSTACK_VERSION }}/stable"
    options:
      debug: "true"
      openstack-origin: "{{ OPENSTACK_ORIGIN }}"
    expose: true
    to:
      - lxd:0
  keystone:
    charm: "keystone"
    num_units: 1
    channel: "{{ OPENSTACK_VERSION }}/stable"
    options:
      admin-password: "{{ AUTH_PASSWORD }}"
      admin-role: "admin"
      debug: "true"
      openstack-origin: "{{ OPENSTACK_ORIGIN }}"
      preferred-api-version: "3"
      service-port: {{ KEYSTONE_SERVICE_PORT }}
    expose: true
    to:
      - lxd:0

{%- if not mysql_innodb %}
  mysql:
    charm: "percona-cluster"
    series: "bionic"
    num_units: 1
    options:
      innodb-buffer-pool-size: 256M
      root-password: "password"
      max-connections: 1500
      tuning-level: fast
      performance-schema: true
      source: "{{ OPENSTACK_ORIGIN }}"
    to:
      - lxd:0

{%- else %}

  keystone-mysql-router:
    charm: ch:mysql-router
    channel: 8.0/stable
    options:
      source: "{{ OPENSTACK_ORIGIN }}"
  glance-mysql-router:
    charm: ch:mysql-router
    channel: 8.0/stable
    options:
      source: "{{ OPENSTACK_ORIGIN }}"
  nova-mysql-router:
    charm: ch:mysql-router
    channel: 8.0/stable
    options:
      source: "{{ OPENSTACK_ORIGIN }}"
  neutron-mysql-router:
    charm: ch:mysql-router
    channel: 8.0/stable
    options:
      source: "{{ OPENSTACK_ORIGIN }}"
  dashboard-mysql-router:
    charm: ch:mysql-router
    channel: 8.0/stable
    options:
      source: "{{ OPENSTACK_ORIGIN }}"
  heat-mysql-router:
    charm: ch:mysql-router
    channel: 8.0/stable
    options:
      source: "{{ OPENSTACK_ORIGIN }}"
{%- if OPENSTACK_VERSION == 'train' or OPENSTACK_VERSION == 'ussuri'  or OPENSTACK_VERSION == 'yoga' %}
  placement-mysql-router:
    charm: ch:mysql-router
    channel: 8.0/stable
    options:
      source: "{{ OPENSTACK_ORIGIN }}"
{%- endif %}
{%- if ENABLE_IRONIC.lower() == 'true' %}
  ironic-api-mysql-router:
    charm: ch:mysql-router
    channel: 8.0/stable
    options:
      source: "{{ OPENSTACK_ORIGIN }}"
  ironic-conductor-mysql-router:
    charm: ch:mysql-router
    channel: 8.0/stable
    options:
      source: "{{ OPENSTACK_ORIGIN }}"
{%- endif %}

  mysql-innodb-cluster:
    charm: ch:mysql-innodb-cluster
    num_units: 3
    channel: 8.0/stable
    options:
      innodb-buffer-pool-size: 256M
      max-connections: 1500
    to:
    - lxd:0
    - lxd:0
    - lxd:0
{%- endif %}

  rabbitmq-server:
    charm: "rabbitmq-server"
    num_units: 1
    options:
      min-cluster-size: 1
    to:
      - lxd:0
  neutron-api:
    charm: "neutron-api"
    channel: "{{ OPENSTACK_VERSION }}/stable"
    num_units: 1
    options:
      debug: "true"
      openstack-origin: "{{ OPENSTACK_ORIGIN }}"
      manage-neutron-plugin-legacy-mode: false
      neutron-security-groups: "true"
    expose: true
    to:
      - lxd:0
  heat:
    charm: "heat"
    channel: "{{ OPENSTACK_VERSION }}/stable"
    num_units: 1
    options:
      debug: "true"
      openstack-origin: "{{ OPENSTACK_ORIGIN }}"
    expose: true
    to:
      - lxd:0

  swift-proxy:
    charm: "swift-proxy"
    num_units: 1
    channel: "{{ OPENSTACK_VERSION }}/stable"
    options:
      zone-assignment: manual
      replicas: 1
      debug: "true"
      openstack-origin: "{{ OPENSTACK_ORIGIN }}"
    expose: true
    to:
      - lxd:0
  swift-storage:
    charm: "swift-storage"
    channel: "{{ OPENSTACK_VERSION }}/stable"
    num_units: 1
    options:
      block-device: '/etc/swift/storagedev1.img|15G'
      zone: 1
      openstack-origin: "{{ OPENSTACK_ORIGIN }}"
    to:
      - 0

{%- if placement %}
  placement:
    charm: "placement"
    channel: "{{ OPENSTACK_VERSION }}/stable"
    num_units: 1
    options:
      debug: "true"
      openstack-origin: {{ OPENSTACK_ORIGIN }}
    to:
    - lxd:0
{%- endif %}
  nova-cloud-controller:
    charm: "nova-cloud-controller"
    channel: "{{ OPENSTACK_VERSION }}/stable"
    num_units: 1
    options:
      network-manager: "Neutron"
      console-access-protocol: "novnc"
      debug: "true"
      openstack-origin: "{{ OPENSTACK_ORIGIN }}"
      cache-known-hosts: "false"
    expose: true
    to:
      - lxd:0

  # memcached is not required cause we run openstack in non-HA

  nova-compute:
    charm: "nova-compute"
    series: "{{ UBUNTU_SERIES }}"
    channel: "{{ OPENSTACK_VERSION }}/stable"
    num_units: {{ agent_nodes | count }}
    options:
      debug: "true"
      openstack-origin: "{{ OPENSTACK_ORIGIN }}"
      virt-type: "qemu"
      enable-resize: "true"
      enable-live-migration: "true"
      migration-auth-type: "ssh"
    to: {{ agent_nodes }}
  openstack-dashboard:
    charm: "openstack-dashboard"
    channel: "{{ OPENSTACK_VERSION }}/stable"
    num_units: 1
    options:
      debug: "true"
      openstack-origin: "{{ OPENSTACK_ORIGIN }}"
    expose: true
    to:
      - lxd:0

{%- if ENABLE_IRONIC.lower() == 'true' %}
  ironic-api:
    charm: "ironic-api"
    channel: "{{ OPENSTACK_VERSION }}/stable"
    num_units: 1
    options:
      debug: "true"
      openstack-origin: "{{ OPENSTACK_ORIGIN }}"
    expose: true
    to:
      - lxd:0
  ironic-conductor:
    charm: "ironic-conductor"
    channel: "{{ OPENSTACK_VERSION }}/stable"
    num_units: 1
    options:
      default-network-interface: flat
      provisioning-network: fakex
      cleaning-network: fakey
      use-ipxe: "false"
      debug: "true"
      openstack-origin: "{{ OPENSTACK_ORIGIN }}"
    expose: true
    to:
      - lxd:0
{%- endif %}
{%- if ENABLE_NAGIOS.lower() == 'true' and '20.' not in DISTRO_VERSION_ID %}
  nagios:
    charm: nagios
    num_units: 1
    to:
    - "0"
    expose: true
  nrpe:
    charm: nrpe
{%- endif %}

  # misc

  ubuntu:
    charm: "ubuntu"
{%- if ORCHESTRATOR == 'hybrid' %}
    num_units: {{ all_nodes | count + 1 }}
{%- else %}
    num_units: {{ all_nodes | count }}
{%- endif %}
    to: {{ all_nodes }}
  ntp:
    charm: "ntp"
{%- if NTP_SERVERS %}
    options:
      source: "{{ NTP_SERVERS }}"
{%- endif %}



relations:

- [ nova-compute:amqp, rabbitmq-server:amqp ]
- [ nova-compute:image-service, glance:image-service ]
- [ nova-cloud-controller:cloud-compute, nova-compute:cloud-compute ]

{%- if placement %}
- [ placement, keystone:identity-service ]
- [ placement, nova-cloud-controller ]
{%- endif %}

- [ nova-cloud-controller:identity-service, keystone:identity-service ]
- [ glance:identity-service, keystone:identity-service ]
- [ neutron-api:identity-service, keystone:identity-service ]
- [ neutron-api:amqp, rabbitmq-server:amqp ]
- [ glance:amqp, rabbitmq-server:amqp ]
- [ nova-cloud-controller:image-service, glance:image-service ]
- [ nova-cloud-controller:amqp, rabbitmq-server:amqp ]
- [ openstack-dashboard:identity-service, keystone:identity-service ]
- [ nova-cloud-controller:neutron-api, neutron-api:neutron-api ]
- [ heat:amqp, rabbitmq-server:amqp ]
- [ heat, keystone ]
- [ swift-proxy, rabbitmq-server ]
- [ swift-proxy, keystone ]
- [ swift-proxy, swift-storage ]
- [ swift-proxy:object-store, glance:object-store ]

- [ ubuntu, ntp ]

{%- if not mysql_innodb %}

- [ keystone:shared-db, mysql:shared-db ]
- [ glance:shared-db, mysql:shared-db ]
- [ nova-cloud-controller:shared-db, mysql:shared-db ]
- [ neutron-api:shared-db, mysql:shared-db ]
- [ openstack-dashboard:shared-db, mysql:shared-db ]
- [ heat:shared-db, mysql:shared-db ]
{%- if placement %}
- [ placement, mysql:shared-db ]
{%- endif %}
{%- if ENABLE_IRONIC.lower() == 'true' %}
- [ ironic-api:shared-db, mysql:shared-db ]
- [ ironic-conductor:shared-db, mysql:shared-db ]
{%- endif %}

{%- else %}

- [ keystone:shared-db, keystone-mysql-router:shared-db ]
- [ keystone-mysql-router:db-router, mysql-innodb-cluster:db-router ]
- [ glance:shared-db, glance-mysql-router:shared-db ]
- [ glance-mysql-router:db-router, mysql-innodb-cluster:db-router ]
- [ nova-cloud-controller:shared-db, nova-mysql-router:shared-db ]
- [ nova-mysql-router:db-router, mysql-innodb-cluster:db-router ]
- [ neutron-api:shared-db, neutron-mysql-router:shared-db ]
- [ neutron-mysql-router:db-router, mysql-innodb-cluster:db-router ]
- [ openstack-dashboard:shared-db, dashboard-mysql-router:shared-db ]
- [ dashboard-mysql-router:db-router, mysql-innodb-cluster:db-router ]
- [ heat:shared-db, heat-mysql-router:shared-db ]
- [ heat-mysql-router:db-router, mysql-innodb-cluster:db-router ]
{%- if placement %}
- [ placement:shared-db, placement-mysql-router:shared-db ]
- [ placement-mysql-router:db-router, mysql-innodb-cluster:db-router ]
{%- endif %}
{%- if ENABLE_IRONIC.lower() == 'true' %}
- [ ironic-api:shared-db, ironic-api-mysql-router:shared-db ]
- [ ironic-api-mysql-router:db-router, mysql-innodb-cluster:db-router ]
- [ ironic-conductor:shared-db, ironic-conductor-mysql-router:shared-db ]
- [ ironic-conductor-mysql-router:db-router, mysql-innodb-cluster:db-router ]
{%- endif %}

{%- endif %}

{%- if ENABLE_IRONIC.lower() == 'true' %}
- [ ironic-api:identity-service, keystone:identity-service ]
- [ ironic-api:amqp, rabbitmq-server:amqp ]
- [ ironic-conductor, ironic-api ]
- [ ironic-conductor, keystone ]
- [ ironic-conductor:amqp, rabbitmq-server:amqp ]
{%- endif %}

{%- if ENABLE_NAGIOS.lower() == 'true' and '20.' not in DISTRO_VERSION_ID %}
- [ nrpe:monitors, nagios:monitors ]
{%- endif %}
